loadstring(game:HttpGet("data:text/plain;base64,-- ✅ Script utama dimulai di sini

-- 🔐 Key System Check 
local validKeys = {} local success, response = pcall(function() return game:HttpGet("https://hrzteam.tech/raw/keysystem2") end)

if success then for key in string.gmatch(response, "[^ ]+") do table.insert(validKeys, key) end else warn("Gagal mengambil data key dari hrzteam.tech") end

local function isValidKey(inputKey) for _, key in ipairs(validKeys) do if inputKey == key then return true end end return false end

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))() local accessGranted = false

local KeyUI = Rayfield:CreateWindow({ Name = "HRZTEAM Key System", LoadingTitle = "HRZTEAM", LoadingSubtitle = "Verifikasi Key...", ConfigurationSaving = {Enabled = false}, Discord = {Enabled = false}, KeySystem = false })

local KeyTab = KeyUI:CreateTab("🔐 Input Key", 4483362458) KeyTab:CreateInput({ Name = "Masukkan Key", PlaceholderText = "Contoh: key123", RemoveTextAfterFocusLost = false, Callback = function(Text) if isValidKey(Text) then Rayfield:Notify({ Title = "Key Valid", Content = "Akses diberikan!", Duration = 4 }) accessGranted = true wait(0.5) KeyUI:Destroy() else Rayfield:Notify({ Title = "Key Salah", Content = "Silakan periksa kembali key kamu.", Duration = 4 }) end end })

repeat task.wait() until accessGranted local _rf = loadstring(game:HttpGet('https://sirius.menu/rayfield'))() local _W = _rf:CreateWindow({ Name = "Hrzteam", LoadingTitle = "Loading coy...", LoadingSubtitle = "by HRZTEAM", ConfigurationSaving = { Enabled = false }, Discord = { Enabled = false }, KeySystem = false, })

_rf:Notify({ Title = "HRZTEAM Script Aktif", Content = "Selamat datang! Script berhasil dijalankan.", Duration = 6 })

local _T = _W:CreateTab("Main", 4483362458) local _S = 16 local _J = 50

local function getHumanoid() local _p = game.Players.LocalPlayer if _p and _p.Character then return _p.Character:FindFirstChildOfClass("Humanoid") end end

_T:CreateSlider({ Name = "Character Speed", Range = {16, 200}, Increment = 1, Suffix = "WalkSpeed", CurrentValue = _S, Callback = function(Value) local _h = getHumanoid() if _h then _h.WalkSpeed = Value end end, })

_T:CreateSlider({ Name = "Jump Power", Range = {50, 200}, Increment = 1, Suffix = "JumpPower", CurrentValue = _J, Callback = function(Value) local _h = getHumanoid() if _h then if _h.UseJumpPower ~= nil then _h.UseJumpPower = true _h.JumpPower = Value else _h.JumpHeight = Value / 2 end end end, })

_T:CreateButton({ Name = "Reset Speed & Jump", Callback = function() local _h = getHumanoid() if _h then _h.WalkSpeed = _S _h.JumpPower = _J end _rf:Notify({ Title = "Reset Berhasil", Content = "Nilai dikembalikan ke default.", Duration = 4, }) end, })

-- 🧲 Tracer ESP (Team Color) 
local RunService = game:GetService("RunService") local camera = workspace.CurrentCamera local Players = game:GetService("Players") local LocalPlayer = Players.LocalPlayer local tracerEnabled = false local tracers = {}

local function createTracer(plr) if not tracerEnabled or plr == LocalPlayer or not plr.Character or not plr.Character:FindFirstChild("HumanoidRootPart") then return end local tracerLine = Drawing.new("Line") tracerLine.Visible = true if plr.Team and plr.Team.TeamColor then tracerLine.Color = plr.Team.TeamColor.Color else tracerLine.Color = Color3.fromRGB(255, 255, 0) end tracerLine.Thickness = 1.5 tracerLine.Transparency = 1 tracers[plr] = tracerLine end

local function clearTracers() for _, t in pairs(tracers) do if t then t:Remove() end end tracers = {} end

RunService.RenderStepped:Connect(function() if not tracerEnabled then return end for _, plr in pairs(Players:GetPlayers()) do if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then local hrp = plr.Character.HumanoidRootPart local tracer = tracers[plr] if not tracer then createTracer(plr) tracer = tracers[plr] end if tracer then local pos, onScreen = camera:WorldToViewportPoint(hrp.Position) if onScreen then tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y) tracer.To = Vector2.new(pos.X, pos.Y) tracer.Visible = true else tracer.Visible = false end end elseif tracers[plr] then tracers[plr].Visible = false end end end)

_T:CreateToggle({ Name = "Enable Tracer Lines (Team Color)", CurrentValue = false, Flag = "TRACER_TEAM_TOGGLE", Callback = function(Value) tracerEnabled = Value if not Value then clearTracers() end end, })

-- 🔍 Wallhack ESP (Highlight) local wallhackEnabled = false local highlights = {}

local function updateWallhack() for _, player in pairs(Players:GetPlayers()) do if player ~= LocalPlayer and player.Character then if wallhackEnabled then if not highlights[player] then local highlight = Instance.new("Highlight") highlight.FillColor = Color3.fromRGB(0, 255, 255) highlight.OutlineColor = Color3.fromRGB(0, 255, 255) highlight.FillTransparency = 0.5 highlight.OutlineTransparency = 0 highlight.Adornee = player.Character highlight.Parent = player.Character highlights[player] = highlight end elseif highlights[player] then highlights[player]:Destroy() highlights[player] = nil end end end end

_T:CreateToggle({ Name = "ESP Wallhack (Highlight)", CurrentValue = false, Callback = function(Value) wallhackEnabled = Value updateWallhack() end })

Players.PlayerRemoving:Connect(function(plr) if highlights[plr] then highlights[plr]:Destroy() highlights[plr] = nil end end)

-- 📌 ESP Bone, Box, Name local function createText() local t = Drawing.new("Text") t.Size = 13 t.Center = true t.Outline = true t.Visible = true t.Color = Color3.fromRGB(255, 255, 255) return t end

local function createLine() local l = Drawing.new("Line") l.Thickness = 1.5 l.Transparency = 1 l.Visible = true l.Color = Color3.fromRGB(0, 255, 255) return l end

local function createBox() local box = Drawing.new("Square") box.Thickness = 1 box.Filled = false box.Visible = true box.Color = Color3.fromRGB(255, 255, 255) return box end

local espEnabled = {name = false, box = false, bone = false} local drawings = {} local bones = { {"Head", "UpperTorso"}, {"UpperTorso", "LowerTorso"}, {"UpperTorso", "LeftUpperArm"}, {"LeftUpperArm", "LeftLowerArm"}, {"LeftLowerArm", "LeftHand"}, {"UpperTorso", "RightUpperArm"}, {"RightUpperArm", "RightLowerArm"}, {"RightLowerArm", "RightHand"}, {"LowerTorso", "LeftUpperLeg"}, {"LeftUpperLeg", "LeftLowerLeg"}, {"LeftLowerLeg", "LeftFoot"}, {"LowerTorso", "RightUpperLeg"}, {"RightUpperLeg", "RightLowerLeg"}, {"RightLowerLeg", "RightFoot"}, }

RunService.RenderStepped:Connect(function() for _, player in pairs(Players:GetPlayers()) do if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then local char = player.Character drawings[player] = drawings[player] or { name = createText(), box = createBox(), bones = {} } local hrp = char:FindFirstChild("HumanoidRootPart") local head = char:FindFirstChild("Head") local pos, onScreen = camera:WorldToViewportPoint(hrp.Position)

if espEnabled.name and head and onScreen then
            local tag = drawings[player].name
            tag.Text = player.DisplayName
            tag.Position = Vector2.new(pos.X, pos.Y - 25)
            tag.Visible = true
        elseif drawings[player].name then
            drawings[player].name.Visible = false
        end

        if espEnabled.box and onScreen then
            local box = drawings[player].box
            box.Position = Vector2.new(pos.X - 20, pos.Y - 30)
            box.Size = Vector2.new(40, 60)
            box.Visible = true
        elseif drawings[player].box then
            drawings[player].box.Visible = false
        end

        for i, pair in ipairs(bones) do
            local p1, p2 = char:FindFirstChild(pair[1]), char:FindFirstChild(pair[2])
            if espEnabled.bone and p1 and p2 then
                local pos1, on1 = camera:WorldToViewportPoint(p1.Position)
                local pos2, on2 = camera:WorldToViewportPoint(p2.Position)
                local line = drawings[player].bones[i] or createLine()
                if on1 and on2 then
                    line.From = Vector2.new(pos1.X, pos1.Y)
                    line.To = Vector2.new(pos2.X, pos2.Y)
                    line.Visible = true
                    drawings[player].bones[i] = line
                elseif line then
                    line.Visible = false
                end
            elseif drawings[player].bones[i] then
                drawings[player].bones[i].Visible = false
            end
        end
    elseif drawings[player] then
        if drawings[player].name then drawings[player].name.Visible = false end
        if drawings[player].box then drawings[player].box.Visible = false end
        for _, l in pairs(drawings[player].bones) do
            if l then l.Visible = false end
        end
    end
end

end)

_T:CreateToggle({ Name = "ESP Name", CurrentValue = false, Callback = function(Value) espEnabled.name = Value end }) _T:CreateToggle({ Name = "ESP Box", CurrentValue = false, Callback = function(Value) espEnabled.box = Value end }) _T:CreateToggle({ Name = "ESP Bone (Skeleton)", CurrentValue = false, Callback = function(Value) espEnabled.bone = Value end })

-- 🌐 Forum Button (Null4You) 
_T:CreateButton({ Name = "🔗 Buka Forum HRZTEAM", Callback = function() setclipboard("https://null4you.my.id/") _rf:Notify({ Title = "Forum Link Disalin", Content = "Link sudah disalin ke clipboard.", Duration = 5 }) end })

-- 📊 FPS Checker 
local fpsLabel = _T:CreateParagraph({ Title = "FPS", Content = "Menghitung..." }) task.spawn(function() local frameCount, lastTime = 0, tick() while true do frameCount += 1 if tick() - lastTime >= 1 then fpsLabel:Set({ Title = "FPS", Content = tostring(frameCount) }) frameCount = 0 lastTime = tick() end RunService.RenderStepped:Wait() end end)

-- 🛡️ Anti-AFK System 
task.spawn(function() while true do game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame) task.wait(1) game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame) task.wait(60) end end)

", true))()
